{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fonSize","baseURL","axios","get","then","response","data","newObject","post","id","request","put","console","log","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","group","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAceA,EAZF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACXC,EAAQF,EAAKG,UAAY,qBAC/B,YAEA,OACI,qBAAIC,UAAY,OAAhB,UACKJ,EAAKK,QACN,wBAAQC,QAAWL,EAAnB,SAAsCC,QCKnCK,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAIP,qBAAKJ,UAAY,QAAjB,SACKI,KCQEC,EAfA,WAOX,OACI,sBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,QAAS,IAIT,UACI,uBACA,oG,gBCVNC,EAAU,aAkBD,EAhBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc9B,EAXA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS9B,EANA,SAACG,EAAIF,GAChB,IAAMG,EAAUR,IAAMS,IAAN,UAAaV,EAAb,YAAwBQ,GAAMF,GAE9C,OADAK,QAAQC,IAAIH,GACLA,EAAQN,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC+E9BQ,EA1FH,SAACC,GACX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRC,IAEGtB,MAAK,SAAAuB,GACJT,EAASS,QAEZ,IAEH,IAgDMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAA1C,GAAI,OAAIA,EAAKG,aAEhE,OACE,qCACE,4CACA,cAAC,EAAD,CAAcK,QAAW4B,IACzB,8BACE,yBAAQ9B,QAAW,kBAAM6B,GAAYD,IAArC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAAA3C,GAAI,OACjB,cAAC,EAAD,CACAA,KAAQA,EACRC,iBAAoB,kBA/DH,SAACqB,GAC1B,IAAMtB,EAAO8B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAEvB,KAAOA,KAChCwB,EAAW,2BAAO9C,GAAP,IAAaG,WAAYH,EAAKG,YAE/CoC,EACUjB,EAAIwB,GACX7B,MAAK,SAAA8B,GACJhB,EAASD,EAAMa,KAAI,SAAA3C,GAAI,OAAIA,EAAKsB,KAAOA,EAAKtB,EAAO+C,SAEpDC,OAAM,SAAAC,GACLZ,EAAgB,QAAD,OACLrC,EAAKK,QADA,qCAGf6C,YAAW,WACTb,EAAgB,QACf,KAEHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAEvB,KAAOA,SA8CN6B,CAAmBnD,EAAKsB,MAFrCtB,EAAKsB,SAKxB,8CACA,uBAAM8B,SAzCM,SAACC,GAEfA,EAAMC,iBAEN,IAAMC,EAAa,CACjBlD,QAAS2B,EACTwB,MAAM,IAAIC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,GAC3BtC,GAAIQ,EAAM+B,OAAS,GAIrBtB,EACUgB,GACPtC,MAAK,SAAA8B,GACJhB,EAASD,EAAMgC,OAAOf,IACtBd,EAAW,QAyBb,UACE,uBAAO8B,MAAS/B,EAASgC,SA/CN,SAACX,GACxB5B,QAAQwC,MAAMZ,EAAMa,OAAOH,OAC3B9B,EAAWoB,EAAMa,OAAOH,UA8CpB,wBAAQI,KAAO,SAAf,qBAEF,cAAC,EAAD,Q,MCtFNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.142ea2cf.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n    const label = note.important ? 'make not important' : \n    'important'\n\n    return (\n        <li className = 'note'>\n            {note.content} \n            <button onClick = {toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({message}) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className = 'error'>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fonSize: 16\n    }\n\n    return (\n        <div style = {footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, Gleb Tishchenko 2021</em>\n        </div>\n    )\n}\n\nexport default Footer","import axios from 'axios'\n\nconst baseURL = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseURL)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseURL, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseURL}/${id}`, newObject)\n    console.log(request)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note ${note.content} was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.group(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    // estÃ¤ sivun uudelleenlatautumisen\n    event.preventDefault()\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    }\n\n    // noten postaminen palvelimelta\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  // const tulos = ehto ? true : false\n  // if true val1, else if false val2\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  return(\n    <>\n      <h2>All Notes:</h2>\n      <Notification message = {errorMessage} />\n      <div>\n        <button onClick = {() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n            <Note key = {note.id} \n            note = {note}\n            toggleImportance = {() => toggleImportanceOf(note.id)}/>\n        )}\n      </ul>\n      <h2>Add new note</h2>\n      <form onSubmit = {addNote}>\n        <input value = {newNote} onChange = {handleNoteChange}/>\n        <button type = \"submit\">save</button>\n      </form>\n      <Footer />\n    </>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}